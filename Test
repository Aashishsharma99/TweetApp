import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
@SpringBootTest
class UniqueIdGeneratorTest {

    @InjectMocks
    private UniqueIdGenerator uniqueIdGenerator;

    @Test
    void getUniqId_successful() {
        // Arrange
        System.setProperty("server.id", "01"); // Replace with the expected value for testing
        Thread.currentThread().setName("TestThread"); // Replace with the expected value for testing
        int totalUniqNosNeeded = 5;

        // Act
        List<String> uniqIds = uniqueIdGenerator.getUniqId(totalUniqNosNeeded);

        // Assert
        assertEquals(totalUniqNosNeeded, uniqIds.size());
        for (String uniqId : uniqIds) {
            // Validate the format of the generated unique ID
            // You may need to adjust this based on the actual format in your implementation
            assertEquals(20, uniqId.length()); // Assuming the length of the ID is 20 characters
            // Add more validations as needed
        }
    }

    @Test
    void getUniqId_exception() {
        // Arrange
        System.setProperty("server.id", null); // Set server.id to null to simulate an exception
        Thread.currentThread().setName(null); // Set thread name to null to simulate an exception
        int totalUniqNosNeeded = 5;

        // Act
        List<String> uniqIds = uniqueIdGenerator.getUniqId(totalUniqNosNeeded);

        // Assert
        assertEquals(0, uniqIds.size()); // Since an exception is simulated, the list should be empty
    }
}
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
@SpringBootTest
class UniqueIdGeneratorTest {

    @InjectMocks
    private UniqueIdGenerator uniqueIdGenerator;

    @Test
    void get21DigitUniqId_successful() {
        // Arrange
        System.setProperty("server.id", "01"); // Replace with the expected value for testing
        Thread.currentThread().setName("TestThread"); // Replace with the expected value for testing
        int totalUniqNosNeeded = 5;

        // Act
        List<String> uniqIds = uniqueIdGenerator.get21DigitUniqId(totalUniqNosNeeded);

        // Assert
        assertEquals(totalUniqNosNeeded, uniqIds.size());
        for (String uniqId : uniqIds) {
            // Validate the format of the generated unique ID
            // You may need to adjust this based on the actual format in your implementation
            assertEquals(21, uniqId.length()); // Assuming the length of the ID is 21 characters
            // Add more validations as needed
        }
    }

    @Test
    void get21DigitUniqId_exception() {
        // Arrange
        System.setProperty("server.id", null); // Set server.id to null to simulate an exception
        Thread.currentThread().setName(null); // Set thread name to null to simulate an exception
        int totalUniqNosNeeded = 5;

        // Act
        List<String> uniqIds = uniqueIdGenerator.get21DigitUniqId(totalUniqNosNeeded);

        // Assert
        assertEquals(0, uniqIds.size()); // Since an exception is simulated, the list should be empty
    }
}
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
@SpringBootTest
class UniqueIdGeneratorTest {

    @InjectMocks
    private UniqueIdGenerator uniqueIdGenerator;

    @Test
    void getUniqId_successful() {
        // Arrange
        int totalUniqNosNeeded = 1;

        // Act
        String uniqId = uniqueIdGenerator.getUniqId();

        // Assert
        assertEquals(20, uniqId.length()); // Assuming the length of the ID is 20 characters
        // Add more validations as needed
    }

    @Test
    void get21DigitUniqId_successful() {
        // Arrange
        int totalUniqNosNeeded = 1;

        // Act
        String uniqId = uniqueIdGenerator.get21DigitUniqId();

        // Assert
        assertEquals(21, uniqId.length()); // Assuming the length of the ID is 21 characters
        // Add more validations as needed
    }

    @Test
    void getUniqIds_successful() {
        // Arrange
        int totalUniqNosNeeded = 5;

        // Act
        List<String> uniqIds = uniqueIdGenerator.getUniqIds(totalUniqNosNeeded);

        // Assert
        assertEquals(totalUniqNosNeeded, uniqIds.size());
        for (String uniqId : uniqIds) {
            // Validate the format of the generated unique ID
            // You may need to adjust this based on the actual format in your implementation
            assertEquals(20, uniqId.length()); // Assuming the length of the ID is 20 characters
            // Add more validations as needed
        }
    }
}
