import org.apache.logging.log4j.Logger;
import org.dom4j.Document;
import org.dom4j.Node;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.lang.reflect.Field;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
@SpringBootTest
class XpathValueFinderTest {

    @Mock
    private Document document;

    @Mock
    private Node node;

    @InjectMocks
    private XpathValueFinder xpathValueFinder;

    @Test
    void getElementValue_nodeFound() throws NoSuchFieldException, IllegalAccessException {
        // Arrange
        String xPath = "//test/xpath";
        String expectedValue = "MockedValue";

        // Mocking behavior
        when(document.selectSingleNode(xPath)).thenReturn(node);
        when(node.getText()).thenReturn(expectedValue);

        // Make log field accessible
        Field logField = XpathValueFinder.class.getDeclaredField("log");
        logField.setAccessible(true);
        Logger log = (Logger) logField.get(xpathValueFinder);

        // Act
        String result = xpathValueFinder.getElementValue(document, xPath);

        // Assert
        assertEquals(expectedValue, result);
        verify(document, times(1)).selectSingleNode(xPath);
        verify(node, times(1)).getText();

        // Verify that the log.error method is called when an exception is thrown
        verify(log).error(anyString(), anyString(), eq("XpathValueFinder"), eq("getElementValue"),
                contains("EXCEPTION: findElementValue()"), eq("Error"), any(RuntimeException.class), anyString());
    }
    
    // Rest of the test methods...
}
