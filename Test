import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
@SpringBootTest
class HttpCallerTest {

    @Mock
    private HttpCallDao httpCallDao; // Assuming you have a corresponding HttpCallDao class

    @InjectMocks
    private HttpCaller httpCaller;

    @Test
    void makeCall_successful() throws Exception {
        // Arrange
        String urlString = "https://example.com";
        String data = "key=value";
        String expectedResponse = "MockedResponse";

        // Mocking behavior
        when(httpCallDao.callHttpPost(eq(urlString), anyMap())).thenReturn(expectedResponse);

        // Act
        String result = httpCaller.makeCall(urlString, data);

        // Assert
        assertEquals(expectedResponse, result);
        verify(httpCallDao, times(1)).callHttpPost(eq(urlString), anyMap());
    }

    @Test
    void makeCall_invalidData() throws Exception {
        // Arrange
        String urlString = "https://example.com";
        String data = "invalidData";

        // Act
        String result = httpCaller.makeCall(urlString, data);

        // Assert
        assertEquals("", result); // Since data is invalid, the result should be an empty string
        verifyNoInteractions(httpCallDao); // No interactions with HttpCallDao in this case
    }

    @Test
    void makeCall_exceptionThrown() throws Exception {
        // Arrange
        String urlString = "https://example.com";
        String data = "key=value";
        String errorMessage = "Simulated Exception";

        // Mocking behavior
        when(httpCallDao.callHttpPost(eq(urlString), anyMap())).thenThrow(new RuntimeException(errorMessage));

        // Act
        String result = httpCaller.makeCall(urlString, data);

        // Assert
        assertEquals("", result); // Since an exception is thrown, the result should be an empty string
        verify(httpCaller.log).info(contains("Aborted"), anyString()); // Verifying the log message for an aborted call
    }
}
