import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URL;
import java.net.URLConnection;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
@SpringBootTest
class HttpCallerTest {

    @Mock
    private URL url;

    @Mock
    private URLConnection urlConnection;

    @Mock
    private OutputStreamWriter outputStreamWriter;

    @Mock
    private BufferedReader bufferedReader;

    @InjectMocks
    private HttpCaller httpCaller;

    @Test
    void makeCall_successful() throws Exception {
        // Arrange
        String urlString = "https://example.com";
        String data = "requestData";
        String expectedResponse = "MockedResponse";

        // Mocking behavior
        when(url.openConnection()).thenReturn(urlConnection);
        when(urlConnection.getOutputStream()).thenReturn(outputStreamWriter);
        when(urlConnection.getInputStream()).thenReturn(bufferedReader);
        when(bufferedReader.readLine()).thenReturn(expectedResponse, null);

        // Act
        String result = httpCaller.makeCallOld(urlString, data);

        // Assert
        assertEquals(expectedResponse, result);
        verify(url, times(1)).openConnection();
        verify(urlConnection, times(1)).setDoOutput(true);
        verify(outputStreamWriter, times(1)).write(data);
        verify(outputStreamWriter, times(1)).flush();
        verify(bufferedReader, times(1)).readLine();
        verify(outputStreamWriter, times(1)).close();
        verify(bufferedReader, times(1)).close();
    }

    @Test
    void makeCall_exceptionThrown() throws Exception {
        // Arrange
        String urlString = "https://example.com";
        String data = "requestData";
        String errorMessage = "Simulated Exception";

        // Mocking behavior
        when(url.openConnection()).thenReturn(urlConnection);
        when(urlConnection.getOutputStream()).thenReturn(outputStreamWriter);
        when(urlConnection.getInputStream()).thenThrow(new RuntimeException(errorMessage));

        // Act and Assert
        Exception exception = assertThrows(Exception.class, () -> httpCaller.makeCallOld(urlString, data));
        assertEquals(errorMessage, exception.getMessage());

        verify(url, times(1)).openConnection();
        verify(urlConnection, times(1)).setDoOutput(true);
        verify(outputStreamWriter, times(1)).write(data);
        verify(outputStreamWriter, times(1)).flush();
        verify(outputStreamWriter, times(1)).close();
    }
}
