import org.dom4j.Document;
import org.dom4j.Node;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
@SpringBootTest
class XpathValueFinderTest {

    @Mock
    private Document document;

    @Mock
    private Node node;

    @InjectMocks
    private XpathValueFinder xpathValueFinder;

    @Test
    void findAttributeValue_attributeFound() {
        // Arrange
        String attributeValue = "testAttribute";
        String xPath = "//field[@name=\"" + attributeValue + "\"]/./@value";
        String expectedValue = "MockedValue";

        // Mocking behavior
        when(document.selectSingleNode(xPath)).thenReturn(node);
        when(node.getStringValue()).thenReturn(expectedValue);

        // Act
        String result = xpathValueFinder.findAttributeValue(document, attributeValue);

        // Assert
        assertEquals(expectedValue, result);
        verify(document, times(1)).selectSingleNode(xPath);
        verify(node, times(1)).getStringValue();
    }

    @Test
    void findAttributeValue_attributeNotFound() {
        // Arrange
        String attributeValue = "nonexistentAttribute";
        String xPath = "//field[@name=\"" + attributeValue + "\"]/./@value";

        // Mocking behavior
        when(document.selectSingleNode(xPath)).thenReturn(null);

        // Act
        String result = xpathValueFinder.findAttributeValue(document, attributeValue);

        // Assert
        assertEquals("", result);
        verify(document, times(1)).selectSingleNode(xPath);
        verifyNoInteractions(node); // No interactions with the Node mock
    }

    @Test
    void findAttributeValue_exceptionThrown() {
        // Arrange
        String attributeValue = "testAttribute";
        String xPath = "//field[@name=\"" + attributeValue + "\"]/./@value";
        String errorMessage = "Simulated Exception";

        // Mocking behavior
        when(document.selectSingleNode(xPath)).thenThrow(new RuntimeException(errorMessage));

        // Act
        String result = xpathValueFinder.findAttributeValue(document, attributeValue);

        // Assert
        assertEquals("", result);
        // Verify that the log.debug method is called when an exception is thrown
        verify(xpathValueFinder.log).debug(contains("EXCEPTION: findAttributeValue()"), anyString());
    }
}
